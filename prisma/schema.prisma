generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model company_dentist {
  id                 Int     @id @default(autoincrement())
  id_company_dentist Int     @unique(map: "id_company_dentist_UNIQUE")
  owner_name         String? @db.VarChar(45)
  rfc                String? @unique(map: "rfc_UNIQUE") @db.VarChar(14)
  regimen            String? @db.MediumText
  local              local[]
}

model dates {
  id               Int       @id @default(autoincrement())
  id_dates         Int       @unique(map: "id_dates_UNIQUE")
  id_doctor_FK     Int
  id_patient_FK    Int
  patient_name     String?   @db.VarChar(45)
  clinic_name      String?   @db.VarChar(45)
  type             String?   @db.VarChar(45)
  doctor_name      String?   @db.VarChar(45)
  date_of_date     DateTime? @db.Date
  appointment_time DateTime? @db.Time(0)
  subject          String?   @db.MediumText
  doctor           doctor    @relation(fields: [id_doctor_FK], references: [id_user_FK], onUpdate: Restrict, map: "id_doctor_FK")
  patient          patient   @relation(fields: [id_patient_FK], references: [id_patient], onUpdate: Restrict, map: "id_patient_FK")

  @@index([id_doctor_FK], map: "id_doctor_FK_idx")
  @@index([id_patient_FK], map: "id_patient_FK_idx")
}

model doctor {
  id         Int       @id @unique(map: "id_UNIQUE") @default(autoincrement())
  id_doctor  Int       @unique(map: "id_doctor_UNIQUE")
  id_user_FK Int       @unique(map: "id_user_FK_UNIQUE")
  license    String?   @db.VarChar(75)
  specialty  String?   @db.VarChar(75)
  faculty    String?   @db.VarChar(50)
  school     String?   @db.VarChar(50)
  dates      dates[]
  user_data  user_data @relation(fields: [id_user_FK], references: [id], onUpdate: Restrict, map: "fk_user")

  @@index([id_user_FK], map: "user_data_fk_idx")
}

model employees {
  id              Int       @id @default(autoincrement())
  id_employees    Int       @unique(map: "id_employees_UNIQUE")
  id_user_FK      Int
  id_local_FK     Int       @unique(map: "id_local_FK_UNIQUE")
  employee_number Int?
  charge          String?   @db.VarChar(45)
  employee_type   String?   @db.VarChar(45)
  curp            String?   @db.VarChar(19)
  study_level     String?   @db.MediumText
  document        Bytes?    @db.MediumBlob
  local           local     @relation(fields: [id_local_FK], references: [id], onUpdate: Restrict, map: "id_employees_FK")
  user_data       user_data @relation(fields: [id_user_FK], references: [id], onUpdate: Restrict, map: "id_user_FK")

  @@index([id_user_FK], map: "id_user_FK_idx")
}

model inventory {
  id                  Int                   @id @default(autoincrement())
  id_inventory        Int                   @unique(map: "id_inventory_UNIQUE")
  id_local_FK         Int
  product_name        String                @db.VarChar(45)
  qr                  Bytes?                @db.MediumBlob
  category            String                @db.MediumText
  provider            String?               @db.MediumText
  acquisition_date    DateTime?             @db.DateTime(0)
  expiration_date     DateTime?             @db.DateTime(0)
  cost                Float                 @db.Float
  price               Float                 @db.Float
  stock_quantity      Int?
  minimum_stock       Int?
  maximum_stock       Int?
  observations        String?               @db.LongText
  local               local                 @relation(fields: [id_local_FK], references: [id_local], onUpdate: Restrict, map: "id_inventory_FK")
  inventory_movements inventory_movements[]

  @@index([id_local_FK], map: "id_inventory_FK_idx")
}

model inventory_movements {
  id                     Int       @id @default(autoincrement())
  id_inventory_movements Int       @unique(map: "id_inventory_movements_UNIQUE")
  id_inventory_FK        Int
  sold                   String?   @db.VarChar(10)
  returned               String?   @db.VarChar(10)
  comment                String?   @db.LongText
  date                   DateTime? @db.DateTime(0)
  inventory              inventory @relation(fields: [id_inventory_FK], references: [id_inventory], onUpdate: Restrict, map: "id_inventory_movements_FK")

  @@index([id_inventory_FK], map: "id_inventory_movements_FK_idx")
}

model local {
  id                    Int             @id @default(autoincrement())
  id_local              Int             @unique(map: "id_local_UNIQUE")
  id_company_dentist_FK Int
  name                  String          @db.VarChar(75)
  address               String?         @db.LongText
  map                   String?         @db.MediumText
  building_number       Int?
  phone_number          String?         @db.VarChar(20)
  photos                Bytes?          @db.MediumBlob
  status                String?         @db.VarChar(45)
  employees             employees?
  inventory             inventory[]
  company_dentist       company_dentist @relation(fields: [id_company_dentist_FK], references: [id_company_dentist], onUpdate: Restrict, map: "id_local_FK")

  @@index([id_company_dentist_FK], map: "id_local_FK_idx")
}

model login {
  id                 Int                 @id @default(autoincrement())
  user_id            Int                 @unique(map: "id_UNIQUE")
  id_user_FK         Int
  google_email       String?             @unique(map: "Google Correo_UNIQUE") @db.VarChar(45)
  facebook_email     String?             @unique(map: "facebook_email_UNIQUE") @db.VarChar(45)
  user_data          user_data           @relation(fields: [id_user_FK], references: [id], onUpdate: Restrict, map: "user_FK")
  password_forgotten password_forgotten?
  signup             signup[]

  @@index([id_user_FK], map: "user_FK_idx")
}

model new_password {
  id                       Int                @id @default(autoincrement())
  id_new_password          Int                @unique(map: "id_new_password_UNIQUE")
  id_password_forgotten_FK Int
  newpassword              String?            @db.VarChar(45)
  confirmpassword          String?            @db.VarChar(45)
  password_forgotten       password_forgotten @relation(fields: [id_password_forgotten_FK], references: [id_password_forgotten], onUpdate: Restrict, map: "id_new_password_fk")

  @@index([id_password_forgotten_FK], map: "id_new_password_fk_idx")
}

model password_forgotten {
  id                    Int            @id @default(autoincrement())
  id_password_forgotten Int            @unique(map: "id_password_forgotten_UNIQUE")
  id_login_Fk           Int            @unique(map: "id_login_Fk_UNIQUE")
  email                 String?        @db.VarChar(45)
  new_password          new_password[]
  login                 login          @relation(fields: [id_login_Fk], references: [user_id], onUpdate: Restrict, map: "id_password_forgotten_fk")
}

model patient {
  id                      Int                @id @unique(map: "id_UNIQUE") @default(autoincrement())
  id_patient              Int                @unique(map: "id_patient_UNIQUE")
  id_user_FK              Int
  allergies               String?            @db.VarChar(45)
  emergency_name          String?            @db.MediumText
  cardiac                 Bytes?             @db.MediumBlob
  health_insurance_number String?            @db.VarChar(50)
  medical_history         Bytes?
  radiographs             Bytes?             @db.MediumBlob
  photo_history           Bytes?             @db.MediumBlob
  medical_conditions      Bytes?
  emergency_number        String?            @db.VarChar(45)
  dates                   dates[]
  user_data               user_data          @relation(fields: [id_user_FK], references: [id], onUpdate: Restrict, map: "fk_id_user")
  patient_debt            patient_debt[]
  patient_services        patient_services[]

  @@index([id_user_FK], map: "fk_id_user_idx")
}

model patient_debt {
  id              Int       @id @default(autoincrement())
  id_patient_debt Int       @unique(map: "id_patient_payments_UNIQUE")
  id_patient_FK   Int
  total_debt      Float?    @db.Float
  total           Int?
  date_paid       DateTime? @db.DateTime(0)
  doctor_name     String?   @db.VarChar(45)
  debt            Int?
  patient         patient   @relation(fields: [id_patient_FK], references: [id_patient], onUpdate: Restrict, map: "id_payments_FK")

  @@index([id_patient_FK], map: "id_payments_FK_idx")
}

model patient_services {
  id                  Int     @id @default(autoincrement())
  id_patient_services Int     @unique(map: "id_patient_services_UNIQUE")
  id_patient_FK       Int
  services            String? @db.VarChar(75)
  packages            String? @db.VarChar(45)
  insurance           String? @db.VarChar(45)
  debt_amount         Float?  @db.Float
  patient             patient @relation(fields: [id_patient_FK], references: [id_patient], onUpdate: Restrict, map: "id_services_FK")

  @@index([id_patient_FK], map: "id_services_FK_idx")
}

model signup {
  id              Int     @id @default(autoincrement())
  id_signup       Int     @unique(map: "id_signup_UNIQUE")
  id_login_FK     Int
  fullname        String? @db.VarChar(45)
  email           String? @db.MediumText
  phone_number    String? @db.VarChar(20)
  confirmpassword String? @db.VarChar(45)
  login           login   @relation(fields: [id_login_FK], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "id_login_FK")

  @@index([id_login_FK], map: "id_login_FK_idx")
}

model user_data {
  id           Int         @id @default(autoincrement())
  id_user      String      @unique(map: "id_user_UNIQUE") @db.VarChar(192)
  fullname     String      @db.VarChar(100)
  email        String      @unique(map: "email_UNIQUE") @db.VarChar(60)
  password     String      @db.MediumText
  phone_number String?     @db.VarChar(20)
  home_address String?     @db.MediumText
  birthday     DateTime?   @db.Date
  gender       String?     @db.VarChar(45)
  type_user    String?     @db.VarChar(45)
  doctor       doctor?
  employees    employees[]
  login        login[]
  patient      patient[]
  user_type    user_type[]
}

model user_type {
  id           Int       @id @unique(map: "id_UNIQUE") @default(autoincrement())
  id_user_type Int       @unique(map: "id_user_type_UNIQUE")
  user_data_FK String    @db.VarChar(45)
  admin        String?   @db.VarChar(45)
  doctor       String?   @db.VarChar(45)
  employees    String?   @db.VarChar(45)
  patient      String?   @db.VarChar(45)
  user_data    user_data @relation(fields: [user_data_FK], references: [id_user], onUpdate: Restrict, map: "user_type_fk")

  @@index([user_data_FK], map: "user_type_fk")
}
