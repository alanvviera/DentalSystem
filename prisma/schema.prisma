// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  type              String
  name              String
  last_name         String
  phone             String?
  birthday          DateTime?
  email             String    @unique
  password          String
  sex               String
  address           String?
  curp              String?    @unique
  doctors           Doctor[]
  employees         Employee[]
  clients           Client[]
  appointments      Appointment[]
  administrators    Administrator[]
  documents        Document[]
  photos             Photo[]
}

model Doctor {
  id                     Int         @id @default(autoincrement())
  study_degree           String
  license                String
  schedule_start         DateTime?
  schedule_end           DateTime?
  user_fk                Int         @unique
  user                   User    @relation(fields: [user_fk], references: [id])
  clinics                DoctorClinic[]
  services               DoctorService[]
}

model Employee {
  id                  Int          @id @default(autoincrement())
  study_degree        String
  schedule_start      DateTime?
  schedule_end        DateTime?
  role                String
  user_fk             Int          @unique
  user                User     @relation(fields: [user_fk], references: [id])
  clinics             EmployeeClinic[]
  services            EmployeeService[]
}

model EmployeeService {
  employee_fk Int      @map("employee_fk")
  service_fk Int      @map("service_fk")
  employee    Employee @relation(fields: [employee_fk], references: [id])
  service     Service @relation(fields: [service_fk], references: [id])
  @@id([employee_fk, service_fk], name: "EmployeeServiceId")
}

model DoctorService {
  doctor_fk   Int      @map("doctor_fk")
  service_fk Int      @map("service_fk")
  doctor      Doctor @relation(fields: [doctor_fk], references: [id])
  service     Service @relation(fields: [service_fk], references: [id])
  @@id([doctor_fk, service_fk], name: "DoctorServiceId")
}

model Service {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  doctors DoctorService[]
  employees EmployeeService[]
}

model Client {
  id               Int      @id @default(autoincrement())
  allergies         String?
  emergency_number String?
  health_problems  String?
  user_fk          Int      @unique
  user            User @relation(fields: [user_fk], references: [id])
  payments        Payment[]
  debts           Debt[]
  appointments    Appointment[]
}

model Payment {
  id          Int      @id @default(autoincrement())
  date        DateTime
  ammount     Float
  description String
  client_fk   Int
  client      Client @relation(fields: [client_fk], references: [id])
}

model Document {
  id          Int      @id @default(autoincrement())
  type        String
  file        String
  user_fk     Int
  user        User @relation(fields: [user_fk], references: [id])
}

model Photo {
  id         Int      @id @default(autoincrement())
  type      String
  image     String
  user_fk   Int
  user      User @relation(fields: [user_fk], references: [id])
}

model Debt {
  id             Int      @id @default(autoincrement())
  date           DateTime
  ammount        Float
  paid           Boolean
  description    String
  client_fk      Int
  client         Client @relation(fields: [client_fk], references: [id])
}

model Clinic {
  id              Int               @id @default(autoincrement())
  name            String
  phone           String
  opening_times   String
  address         String
  building_number Int
  doctors         DoctorClinic[]
  employees       EmployeeClinic[]
  administrators  Administrator[]
  notifications   Notification[]
}

model DoctorClinic {
  doctor_fk  Int       @map("doctor_fk")
  clinic_fk  Int       @map("clinic_fk")
  doctor     Doctor  @relation(fields: [doctor_fk], references: [id])
  clinic     Clinic  @relation(fields: [clinic_fk], references: [id])
  @@id([doctor_fk, clinic_fk], name: "DoctorClinicId")
}

model EmployeeClinic {
  employee_fk Int      @map("employee_fk")
  clinic_fk   Int      @map("clinic_fk")
  employee    Employee @relation(fields: [employee_fk], references: [id])
  clinic     Clinic  @relation(fields: [clinic_fk], references: [id])
  @@id([employee_fk, clinic_fk], name: "EmployeeClinicId")
}

model Administrator {
  user_fk    Int      @map("user_fk")
  clinic_fk  Int      @map("clinic_fk")
  user       User   @relation(fields: [user_fk], references: [id])
  clinic     Clinic @relation(fields: [clinic_fk], references: [id])
  @@id([user_fk, clinic_fk], name: "AdministratorClinicId")
}

model Appointment {
  id                  Int       @id @default(autoincrement())
  client_fk           Int
  in_charge_fk        Int
  type                String
  date                DateTime
  hour                DateTime
  subject             String
  status              String   @default("CONFIRMATION PENDING")
  client              Client @relation(fields: [client_fk], references: [id])
  in_charge           User   @relation(fields: [in_charge_fk], references: [id])
  notification        Notification[]
}

model Notification {
  id               Int            @id @default(autoincrement())
  clinic_fk        Int            @map("clinic_fk")
  appointment_fk   Int            @map("appointment_fk")
  clinic           Clinic         @relation(fields: [clinic_fk], references: [id])
  cita             Appointment    @relation(fields: [appointment_fk], references: [id])
}