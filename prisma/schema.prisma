generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model doctor {
  id            Int             @id @unique(map: "id_UNIQUE") @default(autoincrement())
  id_doctor     String          @unique(map: "id_doctor_UNIQUE") @default(uuid())
  id_user_FK    String          @unique(map: "id_user_FK_UNIQUE")
  id_local_FK   String?         @unique(map: "id_local_FK_UNIQUE")
  license       String?         @db.VarChar(75)
  specialty     String?         @db.VarChar(75)
  school        String?         @db.VarChar(50)
  appointment   appointment[]
  client_doctor client_doctor[]
  debt          debt[]
  user_data     user_data       @relation(fields: [id_user_FK], references: [id_user], onUpdate: Restrict, map: "fk_user_doctor")
  local         local[]

  @@index([id_user_FK], map: "fk_user_doctor_idx")
  @@index([id_local_FK], map: "fk_local_doctor_idx")
}

model employee {
  id           Int       @id @unique(map: "id_UNIQUE") @default(autoincrement())
  id_employee  String    @unique(map: "id_employee_UNIQUE") @default(uuid())
  id_user_FK   String    @unique(map: "id_user_FK_UNIQUE")
  id_local_FK  String    @unique(map: "id_local_FK_UNIQUE")
  charge       String?   @db.VarChar(45)
  study_level  String?   @db.MediumText
  document     Bytes?    @db.MediumBlob
  local        local     @relation(fields: [id_local_FK], references: [id_local], onUpdate: Restrict, map: "fk_local_employee")
  user_data    user_data @relation(fields: [id_user_FK], references: [id_user], onUpdate: Restrict, map: "fk_user_employee")

  @@index([id_user_FK], map: "fk_user_employee_idx")
  @@index([id_local_FK], map: "fk_local_employee_idx")
}

model inventory {
  id               Int       @id @unique(map: "id_UNIQUE") @default(autoincrement())
  id_inventory     String    @unique(map: "id_inventory_UNIQUE") @default(uuid())
  id_local_FK      String    @unique(map: "id_local_FK_UNIQUE")
  product_name     String    @db.VarChar(45)
  qr               Bytes?    @db.MediumBlob
  category         String    @db.MediumText
  provider         String?   @db.MediumText
  acquisition_date DateTime? @db.DateTime(0)
  expiration_date  DateTime? @db.DateTime(0)
  cost             Float     @db.Float
  stock_quantity   Int?
  minimum_stock    Int?
  maximum_stock    Int?
  observation      String?   @db.LongText
  local            local     @relation(fields: [id_local_FK], references: [id_local], onUpdate: Restrict, map: "fk_local_inventory")

  @@index([id_local_FK], map: "fk_local_inventory_idx")
}

model local {
  id              Int            @id @unique(map: "id_UNIQUE") @default(autoincrement())
  id_local        String         @unique(map: "id_local_UNIQUE") @default(uuid())
  id_doctor_FK    String         @unique(map: "id_doctor_FK_UNIQUE")
  name            String         @db.VarChar(75)
  address         String?        @db.LongText
  map             String?        @db.MediumText
  building_number Int?
  phone_number    String?        @db.VarChar(20)
  photos          Bytes?         @db.MediumBlob
  status          String?        @db.VarChar(45)
  appointment     appointment[]
  employee        employee?
  inventory       inventory?
  owner           doctor          @relation(fields: [id_doctor_FK], references: [id_doctor], onUpdate: Restrict, map: "fk_doctor_local")

  @@index([id_doctor_FK], map: "fk_doctor_local_idx")
}

model user_data {
  id            Int             @id @unique(map: "id_UNIQUE") @default(autoincrement())
  id_user       String          @unique(map: "id_user_UNIQUE") @default(uuid())
  name          String          @db.VarChar(45)
  last_name     String          @db.VarChar(45)
  email         String          @unique(map: "email_UNIQUE") @db.VarChar(60)
  password      String          @db.MediumText
  curp          String?         @unique(map: "curp_UNIQUE") @db.VarChar(19)
  phone_number  String?         @db.VarChar(20)
  home_address  String?         @db.MediumText
  birthday      DateTime?       @db.Date
  gender        String?         @db.VarChar(45)
  profile_image String?         @db.TinyText
  type_user     user_type
  appointment   appointment[]
  client        client?
  client_doctor client_doctor[]
  debt          debt[]
  doctor        doctor?
  employee      employee?
}

enum user_type {
  CLIENT
  EMPLOYEE
  DOCTOR
  ADMIN
}

model appointment {
  id                Int        @id @unique(map: "id_UNIQUE") @default(autoincrement())
  id_appointment    String     @unique(map: "id_appointment_UNIQUE") @default(uuid())
  id_doctor_FK      String
  id_user_FK        String
  id_local_FK       String
  type              String?    @db.VarChar(45)
  doctor_name       String?    @db.VarChar(45)
  client_name       String?    @db.VarChar(45)
  local_name        String?    @db.VarChar(45)
  date              DateTime?  @db.Date
  hour              DateTime?  @db.Time(0)
  subject           String?    @db.MediumText
  status            String?    @db.VarChar(45)
  user_data         user_data  @relation(fields: [id_user_FK], references: [id_user], onUpdate: Restrict, map: "fk_user_appointment")
  doctor            doctor?    @relation(fields: [id_doctor_FK], references: [id_doctor], onDelete: NoAction, onUpdate: NoAction, map: "fk_doctor_appointment")
  local             local?     @relation(fields: [id_local_FK], references: [id_local], onDelete: NoAction, onUpdate: NoAction, map: "fk_local_appointment")

  @@index([id_doctor_FK], map: "fk_doctor_appointment_idx")
  @@index([id_local_FK], map: "fk_local_appointment_idx")
  @@index([id_user_FK], map: "fk_user_appointment_idx")
}

model client {
  id                      Int       @id @unique(map: "id_UNIQUE") @default(autoincrement())
  id_user_FK              String    @unique(map: "id_user_FK_UNIQUE")
  allergies               String?   @db.VarChar(45)
  emergency_name          String?   @db.MediumText
  emergency_number        String?   @db.VarChar(45)
  health_problems         Bytes?    @db.MediumBlob
  health_insurance_number String?   @db.VarChar(50)
  medical_history         Bytes?
  radiographs             Bytes?    @db.MediumBlob
  photo_history           Bytes?    @db.MediumBlob
  medical_conditions      Bytes?
  user_data               user_data @relation(fields: [id_user_FK], references: [id_user], onUpdate: Restrict, map: "fk_user_client")

  @@index([id_user_FK], map: "fk_user_client_idx")
}

model client_doctor {
  id           Int       @id @unique(map: "id_UNIQUE") @default(autoincrement())
  id_client_FK String
  id_doctor_FK String
  client       user_data @relation(fields: [id_client_FK], references: [id_user], onUpdate: Restrict, map: "fk_client_clientdoctor")
  doctor       doctor    @relation(fields: [id_doctor_FK], references: [id_doctor], onDelete: NoAction, onUpdate: NoAction, map: "fk_doctor_clientdoctor")

  @@index([id_doctor_FK], map: "fk_doctor_clientdoctor_idx")
  @@index([id_client_FK], map: "fk_client_clientdoctor_idx")
  @@map("client_doctor")
}

model debt {
  id           Int        @id @unique(map: "id_UNIQUE") @default(autoincrement())
  id_debt      String     @unique(map: "id_patient_payments_UNIQUE") @default(uuid())
  id_client_FK String
  amount_debt  Float      @db.Float
  id_doctor_FK String
  completed    String?    @db.TinyText
  doctor       doctor     @relation(fields: [id_doctor_FK], references: [id_doctor], onDelete: NoAction, onUpdate: NoAction, map: "fk_doctor_debt")
  client       user_data  @relation(fields: [id_client_FK], references: [id_user], onUpdate: Restrict, map: "fk_client_debt")
  payment      payment[]
  date         DateTime   @db.Date

  @@index([id_doctor_FK], map: "fk_doctor_debt_idx")
  @@index([id_client_FK], map: "fk_client_debt_idx")
}

model payment {
  id          Int      @id @unique(map: "id_UNIQUE") @default(autoincrement())
  id_payment  String   @unique(map: "idpayment_UNIQUE") @default(uuid())
  id_debt_fk  String
  amount      Float    @db.Float
  date        DateTime @db.Date
  debt        debt     @relation(fields: [id_debt_fk], references: [id_debt], onDelete: NoAction, onUpdate: NoAction, map: "fk_debt_payment")

  @@index([id_debt_fk], map: "fk_debt_payment_idx")
}
