generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model agreement_company {
  id                   Int              @id @default(autoincrement())
  id_empresa           Int              @unique(map: "id_empresa_UNIQUE")
  agreement_company_fk Int              @unique(map: "agreement_company_fk_UNIQUE")
  rfc                  String?          @db.VarChar(14)
  company_account      company_account  @relation(fields: [agreement_company_fk], references: [id_company_account], onUpdate: Restrict, map: "company_account_fk")
  contact_company      contact_company?
}

model appointment_register {
  id                      Int             @id @default(autoincrement())
  id_appointment_register Int             @unique(map: "id_appointment_register_UNIQUE")
  id_company_account_FK   Int
  employee_name           String          @db.VarChar(75)
  appointment_time        DateTime?       @db.Time(0)
  assistance              String?         @db.VarChar(45)
  company_account         company_account @relation(fields: [id_company_account_FK], references: [id_company_account], onUpdate: Restrict, map: "id_appointment_register_FK")

  @@index([id_company_account_FK], map: "id_appointment_register_FK_idx")
}

model company_account {
  id                   Int                    @id @default(autoincrement())
  id_company_account   Int                    @unique(map: "id_company_account_UNIQUE")
  employee_name        String                 @db.VarChar(75)
  rfc                  String?                @unique(map: "rfc_UNIQUE") @db.VarChar(14)
  agreement_company    agreement_company?
  appointment_register appointment_register[]
  package_type         package_type?
  type_insurance       type_insurance[]
}

model company_dentist {
  id                 Int     @id @default(autoincrement())
  id_company_dentist Int     @unique(map: "id_company_dentist_UNIQUE")
  owner_name         String? @db.VarChar(45)
  rfc                String? @unique(map: "rfc_UNIQUE") @db.VarChar(14)
  regimen            String? @db.MediumText
  local              local[]
}

model contact_company {
  id                      Int               @id @default(autoincrement())
  id_contact_company      Int               @unique(map: "id_contact_company_UNIQUE")
  id_Agreement_Company_fk Int               @unique(map: "id_Agreement_Company_fk_UNIQUE")
  name_in_charge          String?           @db.VarChar(45)
  position_in_charge      String?           @db.VarChar(45)
  contact_phone           String?           @db.VarChar(45)
  contact_mail            String?           @db.VarChar(45)
  agreement_company       agreement_company @relation(fields: [id_Agreement_Company_fk], references: [id_empresa], onUpdate: Restrict, map: "id_contact_company_fk")
}

model dates {
  id                   Int       @id @default(autoincrement())
  id_dates             Int       @unique(map: "id_dates_UNIQUE")
  id_doctor_FK         Int
  id_patient_FK        Int
  type                 String?   @db.VarChar(45)
  date_of_date         DateTime? @db.Date
  appointment_time     DateTime? @db.Time(0)
  subject              String?   @db.MediumText
  appointment_duration String?   @db.LongText
  patient_name         String?   @db.VarChar(45)
  dentist_name         String?   @db.VarChar(45)
  doctor               doctor    @relation(fields: [id_doctor_FK], references: [id_doctor], onUpdate: Restrict, map: "id_doctor_FK")
  patient              patient   @relation(fields: [id_patient_FK], references: [id_patient], onUpdate: Restrict, map: "id_patient_FK")

  @@index([id_doctor_FK], map: "id_doctor_FK_idx")
  @@index([id_patient_FK], map: "id_patient_FK_idx")
}

model doctor {
  id           Int           @id @unique(map: "id_UNIQUE") @default(autoincrement())
  id_doctor    Int           @unique(map: "id_doctor_UNIQUE")
  id_user_FK   Int
  specialty    String?       @db.VarChar(75)
  study        String?       @db.VarChar(45)
  email        String        @db.MediumText
  phone_number String?       @db.VarChar(20)
  license      Int?
  faculty      String?       @db.VarChar(45)
  dates        dates[]
  user_data    user_data     @relation(fields: [id_user_FK], references: [id_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")
  specialties  specialties[]

  @@index([id_user_FK], map: "fk_user_idx")
}

model employees {
  id              Int       @id @default(autoincrement())
  id_employees    Int       @unique(map: "id_employees_UNIQUE")
  id_user_FK      Int
  id_local_FK     Int       @unique(map: "id_local_FK_UNIQUE")
  employee_number Int?
  charge          String?   @db.VarChar(45)
  employee_type   String?   @db.VarChar(45)
  curp            String?   @db.VarChar(19)
  study_level     String?   @db.MediumText
  document        Bytes?    @db.MediumBlob
  local           local     @relation(fields: [id_local_FK], references: [id], onUpdate: Restrict, map: "id_employees_FK")
  user_data       user_data @relation(fields: [id_user_FK], references: [id_user], onUpdate: Restrict, map: "id_user_FK")

  @@index([id_user_FK], map: "id_user_FK_idx")
}

model inventory {
  id                  Int                   @id @default(autoincrement())
  id_inventory        Int                   @unique(map: "id_inventory_UNIQUE")
  id_local_FK         Int
  product_name        String                @db.VarChar(45)
  qr                  Bytes?                @db.MediumBlob
  category            String                @db.MediumText
  provider            String?               @db.MediumText
  acquisition_date    DateTime?             @db.DateTime(0)
  fecha_vencimiento   DateTime?             @db.DateTime(0)
  cost                Float                 @db.Float
  price               Float                 @db.Float
  stock_quantity      Int?
  minimum_stock       Int?
  maximum_stock       Int?
  observaciones       String?               @db.LongText
  local               local                 @relation(fields: [id_local_FK], references: [id_local], onUpdate: Restrict, map: "id_inventory_FK")
  inventory_movements inventory_movements[]

  @@index([id_local_FK], map: "id_inventory_FK_idx")
}

model inventory_movements {
  id                     Int       @id @default(autoincrement())
  id_inventory_movements Int       @unique(map: "id_inventory_movements_UNIQUE")
  id_inventory_FK        Int
  sold                   String?   @db.VarChar(10)
  returned               String?   @db.VarChar(10)
  comment                String?   @db.LongText
  date                   DateTime? @db.DateTime(0)
  inventory              inventory @relation(fields: [id_inventory_FK], references: [id_inventory], onUpdate: Restrict, map: "id_inventory_movements_FK")

  @@index([id_inventory_FK], map: "id_inventory_movements_FK_idx")
}

model local {
  id                    Int             @id @default(autoincrement())
  id_local              Int             @unique(map: "id_local_UNIQUE")
  id_company_dentist_FK Int
  name                  String          @db.VarChar(75)
  address               String?         @db.LongText
  map                   String?         @db.MediumText
  building_number       Int?
  phone_number          String?         @db.VarChar(20)
  photos                Bytes?          @db.MediumBlob
  status                String?         @db.VarChar(45)
  employees             employees?
  inventory             inventory[]
  company_dentist       company_dentist @relation(fields: [id_company_dentist_FK], references: [id_company_dentist], onUpdate: Restrict, map: "id_local_FK")

  @@index([id_company_dentist_FK], map: "id_local_FK_idx")
}

model login {
  id             Int       @id @default(autoincrement())
  user_id        Int       @unique(map: "id_UNIQUE")
  id_user_FK     Int
  date           DateTime? @db.DateTime(0)
  status         String?   @db.VarChar(45)
  device         String?   @db.MediumText
  google_email   String?   @unique(map: "Google Correo_UNIQUE") @db.VarChar(45)
  facebook_email String?   @unique(map: "facebook_email_UNIQUE") @db.VarChar(45)
  user_data      user_data @relation(fields: [id_user_FK], references: [id_user], onUpdate: Restrict, map: "user_FK")
  signup         signup[]

  @@index([id_user_FK], map: "user_FK_idx")
}

model package_type {
  id                 Int             @id @default(autoincrement())
  id_package_type    Int             @unique(map: "id_package_type_UNIQUE")
  id_package_type_fk Int             @unique(map: "id_package_type_fk_UNIQUE")
  package_name       String?         @db.VarChar(45)
  package_price      Float?          @db.Float
  package_discount   Int?
  package_typecol    String?         @db.VarChar(45)
  patient            patient         @relation(fields: [id_package_type_fk], references: [id_patient], onUpdate: Restrict, map: "fk_package_type")
  company_account    company_account @relation(fields: [id_package_type_fk], references: [id_company_account], onUpdate: Restrict, map: "package_type_fk")
}

model patient {
  id                      Int                @id @unique(map: "id_UNIQUE") @default(autoincrement())
  id_patient              Int                @unique(map: "id_patient_UNIQUE")
  id_user_FK              Int
  allergies               String?            @db.VarChar(45)
  emergency_name          String?            @db.MediumText
  cardiac                 Bytes?             @db.MediumBlob
  health_insurance_number String?            @db.VarChar(50)
  medical_history         Bytes?
  radiographs             Bytes?             @db.MediumBlob
  photo_history           Bytes?             @db.MediumBlob
  medical_conditions      Bytes?
  emergency_number        String?            @db.VarChar(45)
  dates                   dates[]
  package_type            package_type?
  user_data               user_data          @relation(fields: [id_user_FK], references: [id_user], onUpdate: Restrict, map: "fk_id_user")
  patient_payments        patient_payments[]
  patient_services        patient_services[]

  @@index([id_user_FK], map: "fk_id_user_idx")
}

model patient_payments {
  id                  Int       @id @default(autoincrement())
  id_patient_payments Int       @unique(map: "id_patient_payments_UNIQUE")
  id_patient_FK       Int
  date_paid           DateTime? @db.DateTime(0)
  note                String?   @db.LongText
  amount              Int?
  patient             patient   @relation(fields: [id_patient_FK], references: [id_patient], onUpdate: Restrict, map: "id_payments_FK")

  @@index([id_patient_FK], map: "id_payments_FK_idx")
}

model patient_services {
  id                  Int     @id @default(autoincrement())
  id_patient_services Int     @unique(map: "id_patient_services_UNIQUE")
  id_patient_FK       Int
  services            String? @db.VarChar(75)
  packages            String? @db.VarChar(45)
  insurance           String? @db.VarChar(45)
  debt_amount         Float?  @db.Float
  patient_servicescol String? @db.VarChar(45)
  patient             patient @relation(fields: [id_patient_FK], references: [id_patient], onUpdate: Restrict, map: "id_services_FK")

  @@index([id_patient_FK], map: "id_services_FK_idx")
}

model signup {
  id          Int     @id @default(autoincrement())
  id_signup   Int     @unique(map: "id_signup_UNIQUE")
  id_login_FK Int
  name        String? @db.VarChar(45)
  email       String? @db.MediumText
  password    String? @db.VarChar(45)
  login       login   @relation(fields: [id_login_FK], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "id_login_FK")

  @@index([id_login_FK], map: "id_login_FK_idx")
}

model specialties {
  id             Int     @id @default(autoincrement())
  id_specialties Int     @unique(map: "id_specialties_UNIQUE")
  id_doctor_FK   Int
  license        Int?
  faculty        String? @db.VarChar(50)
  school         String? @db.VarChar(50)
  year           Int?    @db.Year
  doctor         doctor  @relation(fields: [id_doctor_FK], references: [id_doctor], onUpdate: Restrict, map: "id_specialties_FK")

  @@index([id_doctor_FK], map: "id_specialties_FK_idx")
}

model type_insurance {
  id                    Int             @id @default(autoincrement())
  id_insurance          Int             @unique(map: "id_insurance_UNIQUE")
  id_company_account_fk Int
  name_insurance        String?         @db.VarChar(45)
  precio_seguro         Float?          @db.Float
  company_account       company_account @relation(fields: [id_company_account_fk], references: [id_company_account], onUpdate: Restrict, map: "id_type_insurance_fk")

  @@index([id_company_account_fk], map: "id_type_insurance_fk_idx")
}

model user_data {
  id           Int         @id @default(autoincrement())
  id_user      Int         @unique(map: "id_user_UNIQUE")
  name         String      @db.VarChar(45)
  last_name    String      @db.VarChar(45)
  email        String      @unique(map: "email_UNIQUE") @db.VarChar(60)
  password     String      @db.MediumText
  phone_number String?     @db.VarChar(20)
  home_address String?     @db.MediumText
  birthday     DateTime?   @db.Date
  gender       String?     @db.VarChar(45)
  type_user    String?     @db.VarChar(45)
  doctor       doctor[]
  employees    employees[]
  login        login[]
  patient      patient[]
}
