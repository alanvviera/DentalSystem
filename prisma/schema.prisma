generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model doctor {
  id            Int             @id @unique(map: "id_UNIQUE") @default(autoincrement())
  id_doctor     Int             @unique(map: "id_doctor_UNIQUE")
  id_user_FK    Int             @unique(map: "id_user_FK_UNIQUE")
  license       String?         @db.VarChar(75)
  specialty     String?         @db.VarChar(75)
  school        String?         @db.VarChar(50)
  appointments  appointments[]
  client_doctor client_doctor[]
  debt          debt[]
  user_data     user_data       @relation(fields: [id_user_FK], references: [id], onUpdate: Restrict, map: "fk_user")

  @@index([id_user_FK], map: "user_data_fk_idx")
}

model employees {
  id           Int       @id @unique(map: "id_UNIQUE") @default(autoincrement())
  id_employees Int       @unique(map: "id_employees_UNIQUE")
  id_user_FK   Int       @unique(map: "id_user_FK_UNIQUE")
  id_local_FK  Int       @unique(map: "id_local_FK_UNIQUE")
  charge       String?   @db.VarChar(45)
  study_level  String?   @db.MediumText
  document     Bytes?    @db.MediumBlob
  local        local     @relation(fields: [id_local_FK], references: [id], onUpdate: Restrict, map: "id_employees_FK")
  user_data    user_data @relation(fields: [id_user_FK], references: [id], onUpdate: Restrict, map: "id_user_FK")

  @@index([id_user_FK], map: "id_user_FK_idx")
}

model inventory {
  id               Int       @id @unique(map: "id_UNIQUE") @default(autoincrement())
  id_inventory     Int       @unique(map: "id_inventory_UNIQUE")
  id_local_FK      Int       @unique(map: "id_local_FK_UNIQUE")
  product_name     String    @db.VarChar(45)
  qr               Bytes?    @db.MediumBlob
  category         String    @db.MediumText
  provider         String?   @db.MediumText
  acquisition_date DateTime? @db.DateTime(0)
  expiration_date  DateTime? @db.DateTime(0)
  cost             Float     @db.Float
  stock_quantity   Int?
  minimum_stock    Int?
  maximum_stock    Int?
  observations     String?   @db.LongText
  local            local     @relation(fields: [id_local_FK], references: [id_local], onUpdate: Restrict, map: "id_inventory_FK")

  @@index([id_local_FK], map: "id_inventory_FK_idx")
}

model local {
  id              Int            @id @unique(map: "id_UNIQUE") @default(autoincrement())
  id_local        Int            @unique(map: "id_local_UNIQUE")
  name            String         @db.VarChar(75)
  address         String?        @db.LongText
  map             String?        @db.MediumText
  building_number Int?
  phone_number    String?        @db.VarChar(20)
  photos          Bytes?         @db.MediumBlob
  status          String?        @db.VarChar(45)
  appointments    appointments[]
  employees       employees?
  inventory       inventory?
}

model user_data {
  id           Int        @id @unique(map: "id_UNIQUE") @default(autoincrement())
  id_user      String     @unique(map: "id_user_UNIQUE") @db.VarChar(192)
  name         String     @db.VarChar(45)
  last_name    String     @db.VarChar(45)
  email        String     @unique(map: "email_UNIQUE") @db.VarChar(60)
  password     String     @db.MediumText
  curp         String?    @unique(map: "curp_UNIQUE") @db.VarChar(19)
  phone_number String?    @db.VarChar(20)
  home_address String?    @db.MediumText
  birthday     DateTime?  @db.Date
  gender       String?    @db.VarChar(45)
  client       client?
  doctor       doctor?
  employees    employees?
}

model appointments {
  id              Int       @id @unique(map: "id_UNIQUE") @default(autoincrement())
  id_appointments Int       @unique(map: "id_dates_UNIQUE")
  id_doctor_FK    Int
  id_client_FK    Int
  id_local_FK     Int
  type            String?   @db.VarChar(45)
  doctor_name     String?   @db.VarChar(45)
  date            DateTime? @db.Date
  hour            DateTime? @db.Time(0)
  subject         String?   @db.MediumText
  client          client    @relation(fields: [id_client_FK], references: [id_client], onDelete: NoAction, onUpdate: NoAction, map: "client")
  doctor          doctor    @relation(fields: [id_doctor_FK], references: [id_doctor], onDelete: NoAction, onUpdate: NoAction, map: "doctor")
  local           local     @relation(fields: [id_local_FK], references: [id_local], onDelete: NoAction, onUpdate: NoAction, map: "local")

  @@index([id_doctor_FK], map: "doctor_idx")
  @@index([id_client_FK], map: "id_patient_FK_idx")
  @@index([id_local_FK], map: "local_idx")
}

model client {
  id                      Int             @id @unique(map: "id_UNIQUE") @default(autoincrement())
  id_client               Int             @unique(map: "id_patient_UNIQUE")
  id_user_FK              Int             @unique(map: "id_user_FK_UNIQUE")
  allergies               String?         @db.VarChar(45)
  emergency_name          String?         @db.MediumText
  emergency_number        String?         @db.VarChar(45)
  health_problems         Bytes?          @db.MediumBlob
  health_insurance_number String?         @db.VarChar(50)
  medical_history         Bytes?
  radiographs             Bytes?          @db.MediumBlob
  photo_history           Bytes?          @db.MediumBlob
  medical_conditions      Bytes?
  appointments            appointments[]
  user_data               user_data       @relation(fields: [id_user_FK], references: [id], onUpdate: Restrict, map: "fk_id_user")
  client_doctor           client_doctor[]
  debt                    debt[]

  @@index([id_user_FK], map: "fk_id_user_idx")
}

model client_doctor {
  id           Int    @id @unique(map: "id_UNIQUE") @default(autoincrement())
  id_client_FK Int
  id_doctor_FK Int
  client       client @relation(fields: [id_client_FK], references: [id_client], onDelete: NoAction, onUpdate: NoAction, map: "idclient")
  doctor       doctor @relation(fields: [id_doctor_FK], references: [id_doctor], onDelete: NoAction, onUpdate: NoAction, map: "iddoctor")

  @@index([id_client_FK], map: "id_client_FK_idx")
  @@index([id_doctor_FK], map: "id_doctor_FK_idx")
  @@map("client-doctor")
}

model debt {
  id           Int        @id @unique(map: "id_UNIQUE") @default(autoincrement())
  id_debt      Int        @unique(map: "id_patient_payments_UNIQUE")
  id_client_FK Int
  amount_debt  Float      @db.Float
  id_doctor_FK Int
  completed    Int?       @db.TinyInt
  doctor       doctor     @relation(fields: [id_doctor_FK], references: [id_doctor], onDelete: NoAction, onUpdate: NoAction, map: "ID_DOCTOR_FK")
  client       client     @relation(fields: [id_client_FK], references: [id_client], onUpdate: Restrict, map: "id_CLIENT_FK")
  payments     payments[]

  @@index([id_doctor_FK], map: "ID_DOCTOR_FK_idx")
  @@index([id_client_FK], map: "id_payments_FK_idx")
}

model payments {
  id         Int   @id @unique(map: "id_UNIQUE") @default(autoincrement())
  idpayments Int   @unique(map: "idpayments_UNIQUE")
  id_debt_fk Int
  amount     Float @db.Float
  debt       debt  @relation(fields: [id_debt_fk], references: [id_debt], onDelete: NoAction, onUpdate: NoAction, map: "id_payments")

  @@index([id_debt_fk], map: "id_payments_idx")
}
